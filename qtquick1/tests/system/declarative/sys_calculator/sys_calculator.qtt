/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the FOO module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


var add = "+";
var sub = "-";
var mul = "x";
var div = "/";
var xsquared = "x²";
var plusminus = "±";

testcase = {
    initTestCase: function()
    {
        print("Please ensure that $PATH contains $QTDIR/bin, and $QT_SRC_DIR is set to the Qt source directory");
    },

    init: function() {
        testcase.keyCache = {};
    },

    binary_operations_data: {
        operation1: ["0", add, "0", "0"],
        operation2: ["0", sub, "0", "0"],
        operation3: ["0", mul, "0", "0"],
        operation4: ["0", div, "0", "NaN"],
        operation5: ["0", add, "1", "1"],
        operation6: ["0", sub, "1", "-1"],
        operation7: ["0", mul, "1", "0"],
        operation8: ["0", div, "1", "0"],
        operation9: ["0.56789", add, "7453.0145", "7453.58239"],
        operation10: ["0.56789", sub, "7453.0145", "-7452.44661"],
        operation11: ["0.56789", mul, "7453.0145", "4232.492404405"],
        operation12: ["0.56789", div, "7453.0145", "0.00007619601437780645"]
    },

    binary_operations: function(FirstOperand, Operator, SecondOperand, ExpectedResult)
    {
        startDemo("calculator");

        var display = findByProperty("qmlType", "Text")[1];

        enterNumber( FirstOperand );
        select( Operator );
        enterNumber( SecondOperand );
        select( "=" );

        compare(getValue(display), ExpectedResult);
    },

    advanced_mode_data: {
        operation1: ["-123", "Abs", "123"],
        operation2: ["3.14159", "Int", "3"],
        operation3: ["65536", "Sqrt", "256"],
        operation4: ["123", "^2", "15129"],
        operation5: ["500", "1/x", "0.002"],
        operation6: ["999", "+/-", "-999"]
    },

    advanced_mode: function(Operand, Operator, ExpectedResult)
    {
        startDemo("calculator");
        select("Advanced Mode");
        wait(1000);

        var display = findWidget("qmlType", "Text")[1];

        enterNumber( Operand );
        select( Operator );

        compare(getValue(display), ExpectedResult);
    }
}

// Enter num as a series of CalcButton activations
function enterNumber(num) {
    var numString = num.toString();
    for (var i=0; i<numString.length; i++) {
        var digit = numString[i];
        if (testcase.keyCache[digit] == undefined) {
            // It is necessary to do this instead of select(digit) because
            // the display may have the same text as the required button...
            var button = findWidget( { qmlType: "CalcButton", label: digit } );
            testcase.keyCache[digit] = button;
            select(button);
        } else {
            select(testcase.keyCache[digit]);
        }
    }
}

// Starts a demo QML file
function startDemo(demo, demoQml) {
    if (demoQml == undefined) {
        demoQml = demo;
    }
    startApplication("qml", ["$QT_SRC_DIR/demos/declarative/" + demo + "/" + demoQml + ".qml"]);
}
