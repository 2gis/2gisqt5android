/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \chapter QModelIndex & Co. in QML

    Since Qt 5.5, QModelIndex and QPersistentModelIndex are exposed in QML as
    value-based types. Also exposed in a similar fashion are QModelIndexList,
    QItemSelectionRange and QItemSelection. All objects from these types can
    be passed back and forth between QML and C++ as \c var properties or plain
    JavaScript variables.

    We detail here which API all these classes get exposed in QML. Please refer
    to the C++ documentation for more information.

    \note Since all these types are exposed as gadgets, there are no property
    change notification signals emitted. Therefore binding to their properties
    may not give the expected results. This is especially true for QPersistentModelIndex.
    It is perfectly possible to bind to properties holding any of those types.

    \section1 \l QModelIndex and \l QPersistentModelIndex

    \list
    \li \b row : int
    \li \b column : int
    \li \b parent : QModelIndex
    \li \b valid : bool
    \li \b model : QAbstractItemModel
    \li \b internalId : quint64
    \endlist

    All these properties are read-only, as their C++ counterpart.

    \note The usual caveats apply to QModelIndex in QML. If the underlying model changes
    or gets deleted, it may become dangerous to access its properties. Therefore, you
    should not store any QModelIndex. You can, however, store QPersistentModelIndexes
    in a safe way.

    \section1 QModelIndexList

    \l QModelIndexList is exposed in QML as a JavaScript array. Conversions are
    automatically made from and to C++. In fact, any JavaScript array can be
    converted back to QModelIndexList, with non-QModelIndex objects replaced by
    invalid QModelIndexes.

    \note QModelIndex to QPersistentModelIndex conversion happens when accessing
    the array elements because any QModelIndexList property retains reference
    semantics when exposed this way.

    \section1 \l QItemSelectionRange

    \list
    \li \b top : int
    \li \b left : int
    \li \b bottom : int
    \li \b right : int
    \li \b width : int
    \li \b height : int
    \li \b topLeft : QPersistentModelIndex
    \li \b bottomRight : QPersistentModelIndex
    \li \b parent : QModelIndex
    \li \b valid : bool
    \li \b empty : bool
    \li \b model : QAbstractItemModel
    \endlist

    All these properties are read-only, as their C++ counterpart. In addition,
    we also expose the following functions:

    \list
    \li bool \b{contains}(QModelIndex index)
    \li bool \b{contains}(int row, int column, QModelIndex parentIndex)
    \li bool \b{intersects}(QItemSelectionRange other)
    \li QItemSelectionRange \b{intersected}(QItemSelectionRange other)
    \endlist

    \section1 QItemSelection

    Similarly to QModelIndexList, \l QItemSelection is exposed in QML as a JavaScript
    array of QItemSelectionRanges. Conversions are automatically made from and to C++.
    In fact, any JavaScript array can be converted back to QItemSelection, with
    non-QItemSelectionRange objects replaced by empty QItemSelectionRanges.


    \sa ItemSelectionModel
*/
