/*
 * Copyright (C) 2006, 2007 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    EventConstructor,
] interface MouseEvent : UIEvent {
    [InitializedByEventConstructor] readonly attribute long             screenX;
    [InitializedByEventConstructor] readonly attribute long             screenY;
    [InitializedByEventConstructor] readonly attribute long             clientX;
    [InitializedByEventConstructor] readonly attribute long             clientY;
    [InitializedByEventConstructor] readonly attribute boolean          ctrlKey;
    [InitializedByEventConstructor] readonly attribute boolean          shiftKey;
    [InitializedByEventConstructor] readonly attribute boolean          altKey;
    [InitializedByEventConstructor] readonly attribute boolean          metaKey;
    [InitializedByEventConstructor] readonly attribute unsigned short   button;
    [InitializedByEventConstructor] readonly attribute EventTarget?     relatedTarget;
    [MeasureAs=MouseEventMovementX] readonly attribute long             movementX;
    [MeasureAs=MouseEventMovementY] readonly attribute long             movementY;
    [MeasureAs=PrefixedMouseEventMovementX, ImplementedAs=movementX] readonly attribute long webkitMovementX;
    [MeasureAs=PrefixedMouseEventMovementY, ImplementedAs=movementY] readonly attribute long webkitMovementY;

     void initMouseEvent([Default=Undefined] optional DOMString type,
                                       [Default=Undefined] optional boolean canBubble,
                                       [Default=Undefined] optional boolean cancelable,
                                       [Default=Undefined] optional Window view,
                                       [Default=Undefined] optional long detail,
                                       [Default=Undefined] optional long screenX,
                                       [Default=Undefined] optional long screenY,
                                       [Default=Undefined] optional long clientX,
                                       [Default=Undefined] optional long clientY,
                                       [Default=Undefined] optional boolean ctrlKey,
                                       [Default=Undefined] optional boolean altKey,
                                       [Default=Undefined] optional boolean shiftKey,
                                       [Default=Undefined] optional boolean metaKey,
                                       [Default=Undefined] optional unsigned short button,
                                       [Default=Undefined] optional EventTarget relatedTarget);

    // Non-standard
    [MeasureAs=MouseEventOffsetX] readonly attribute long offsetX;
    [MeasureAs=MouseEventOffsetY] readonly attribute long offsetY;
    [MeasureAs=MouseEventX] readonly attribute long x;
    [MeasureAs=MouseEventY] readonly attribute long y;
    [MeasureAs=MouseEventFromElement] readonly attribute Node fromElement;
    [MeasureAs=MouseEventToElement] readonly attribute Node toElement;

    // FIXME: this belongs on the DragEvent interface
    readonly attribute DataTransfer dataTransfer;
};
