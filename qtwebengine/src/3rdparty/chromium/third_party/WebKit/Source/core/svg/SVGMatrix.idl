/*
 * Copyright (C) 2004, 2005 Nikolas Zimmermann <zimmermann@kde.org>
 * Copyright (C) 2004, 2005 Rob Buis <buis@kde.org>
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 * Copyright (C) 2006 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    TypeChecking=Interface,
    ImplementedAs=SVGMatrixTearOff,
    SetWrapperReferenceTo(SVGTransform contextTransform)
] interface SVGMatrix {
    // FIXME: these attributes should all be floats but since we implement
    // AffineTransform with doubles setting these as doubles makes more sense.
    [RaisesException=Setter] attribute double a;
    [RaisesException=Setter] attribute double b;
    [RaisesException=Setter] attribute double c;
    [RaisesException=Setter] attribute double d;
    [RaisesException=Setter] attribute double e;
    [RaisesException=Setter] attribute double f;

    SVGMatrix multiply(SVGMatrix secondMatrix);
    [RaisesException] SVGMatrix inverse();
    SVGMatrix translate(float x, float y);
    SVGMatrix scale(float scaleFactor);
    SVGMatrix scaleNonUniform(float scaleFactorX, float scaleFactorY);
    SVGMatrix rotate(float angle);
    [RaisesException] SVGMatrix rotateFromVector(float x, float y);
    SVGMatrix flipX();
    SVGMatrix flipY();
    SVGMatrix skewX(float angle);
    SVGMatrix skewY(float angle);
};

