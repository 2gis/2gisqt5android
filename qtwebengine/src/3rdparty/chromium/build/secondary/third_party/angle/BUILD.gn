# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This config is applied to internal Angle targets (not pushed to dependents).
config("internal_config") {
  include_dirs = [
    "include",
    "src",
  ]
}

component("translator") {
  sources = [
    "src/compiler/translator/ShaderLang.cpp",
  ]

  defines = [ "ANGLE_TRANSLATOR_IMPLEMENTATION" ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]

  deps = [
    ":translator_lib",
  ]
}

# Holds the shared includes so we only need to list them once.
source_set("includes") {
  sources = [
    "include/EGL/egl.h",
    "include/EGL/eglext.h",
    "include/EGL/eglplatform.h",
    "include/GLES2/gl2.h",
    "include/GLES2/gl2ext.h",
    "include/GLES2/gl2platform.h",
    "include/GLES3/gl3.h",
    "include/GLES3/gl3ext.h",
    "include/GLES3/gl3platform.h",
    "include/GLSLANG/ShaderLang.h",
    "include/KHR/khrplatform.h",
  ]
}

static_library("preprocessor") {
  sources = [
    "src/compiler/preprocessor/DiagnosticsBase.cpp",
    "src/compiler/preprocessor/DiagnosticsBase.h",
    "src/compiler/preprocessor/DirectiveHandlerBase.cpp",
    "src/compiler/preprocessor/DirectiveHandlerBase.h",
    "src/compiler/preprocessor/DirectiveParser.cpp",
    "src/compiler/preprocessor/DirectiveParser.h",
    "src/compiler/preprocessor/ExpressionParser.cpp",
    "src/compiler/preprocessor/ExpressionParser.h",
    "src/compiler/preprocessor/ExpressionParser.y",
    "src/compiler/preprocessor/Input.cpp",
    "src/compiler/preprocessor/Input.h",
    "src/compiler/preprocessor/Lexer.cpp",
    "src/compiler/preprocessor/Lexer.h",
    "src/compiler/preprocessor/Macro.cpp",
    "src/compiler/preprocessor/Macro.h",
    "src/compiler/preprocessor/MacroExpander.cpp",
    "src/compiler/preprocessor/MacroExpander.h",
    "src/compiler/preprocessor/Preprocessor.cpp",
    "src/compiler/preprocessor/Preprocessor.h",
    "src/compiler/preprocessor/SourceLocation.h",
    "src/compiler/preprocessor/Token.cpp",
    "src/compiler/preprocessor/Token.h",
    "src/compiler/preprocessor/Tokenizer.cpp",
    "src/compiler/preprocessor/Tokenizer.h",
    "src/compiler/preprocessor/Tokenizer.l",
    "src/compiler/preprocessor/numeric_lex.h",
    "src/compiler/preprocessor/pp_utils.h",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]

}

static_library("translator_lib") {
  sources = [
    "src/common/RefCountObject.cpp",
    "src/common/RefCountObject.h",
    "src/common/angleutils.h",
    "src/common/blocklayout.cpp",
    "src/common/blocklayout.h",
    "src/common/debug.cpp",
    "src/common/debug.h",
    "src/common/event_tracer.cpp",
    "src/common/event_tracer.h",
    "src/common/mathutil.cpp",
    "src/common/mathutil.h",
    "src/common/shadervars.h",
    "src/common/utilities.cpp",
    "src/common/utilities.h",
    "src/common/version.h",
    "src/compiler/translator/BaseTypes.h",
    "src/compiler/translator/BuiltInFunctionEmulator.cpp",
    "src/compiler/translator/BuiltInFunctionEmulator.h",
    "src/compiler/translator/CodeGen.cpp",
    "src/compiler/translator/Common.h",
    "src/compiler/translator/Compiler.cpp",
    "src/compiler/translator/ConstantUnion.h",
    "src/compiler/translator/DetectCallDepth.cpp",
    "src/compiler/translator/DetectCallDepth.h",
    "src/compiler/translator/DetectDiscontinuity.cpp",
    "src/compiler/translator/DetectDiscontinuity.h",
    "src/compiler/translator/Diagnostics.cpp",
    "src/compiler/translator/Diagnostics.h",
    "src/compiler/translator/DirectiveHandler.cpp",
    "src/compiler/translator/DirectiveHandler.h",
    "src/compiler/translator/ExtensionBehavior.h",
    "src/compiler/translator/FlagStd140Structs.cpp",
    "src/compiler/translator/FlagStd140Structs.h",
    "src/compiler/translator/ForLoopUnroll.cpp",
    "src/compiler/translator/ForLoopUnroll.h",
    "src/compiler/translator/HashNames.h",
    "src/compiler/translator/InfoSink.cpp",
    "src/compiler/translator/InfoSink.h",
    "src/compiler/translator/Initialize.cpp",
    "src/compiler/translator/Initialize.h",
    "src/compiler/translator/InitializeDll.cpp",
    "src/compiler/translator/InitializeDll.h",
    "src/compiler/translator/InitializeGlobals.h",
    "src/compiler/translator/InitializeParseContext.cpp",
    "src/compiler/translator/InitializeParseContext.h",
    "src/compiler/translator/InitializeVariables.cpp",
    "src/compiler/translator/InitializeVariables.h",
    "src/compiler/translator/IntermTraverse.cpp",
    "src/compiler/translator/Intermediate.cpp",
    "src/compiler/translator/LoopInfo.cpp",
    "src/compiler/translator/LoopInfo.h",
    "src/compiler/translator/MMap.h",
    "src/compiler/translator/NodeSearch.h",
    "src/compiler/translator/OutputESSL.cpp",
    "src/compiler/translator/OutputESSL.h",
    "src/compiler/translator/OutputGLSL.cpp",
    "src/compiler/translator/OutputGLSL.h",
    "src/compiler/translator/OutputGLSLBase.cpp",
    "src/compiler/translator/OutputGLSLBase.h",
    "src/compiler/translator/OutputHLSL.cpp",
    "src/compiler/translator/OutputHLSL.h",
    "src/compiler/translator/ParseContext.cpp",
    "src/compiler/translator/ParseContext.h",
    "src/compiler/translator/PoolAlloc.cpp",
    "src/compiler/translator/PoolAlloc.h",
    "src/compiler/translator/Pragma.h",
    "src/compiler/translator/QualifierAlive.cpp",
    "src/compiler/translator/QualifierAlive.h",
    "src/compiler/translator/RemoveTree.cpp",
    "src/compiler/translator/RemoveTree.h",
    "src/compiler/translator/RenameFunction.h",
    "src/compiler/translator/RewriteElseBlocks.cpp",
    "src/compiler/translator/RewriteElseBlocks.h",
    "src/compiler/translator/SearchSymbol.cpp",
    "src/compiler/translator/SearchSymbol.h",
    "src/compiler/translator/ShHandle.h",
    "src/compiler/translator/SymbolTable.cpp",
    "src/compiler/translator/SymbolTable.h",
    "src/compiler/translator/TranslatorESSL.cpp",
    "src/compiler/translator/TranslatorESSL.h",
    "src/compiler/translator/TranslatorGLSL.cpp",
    "src/compiler/translator/TranslatorGLSL.h",
    "src/compiler/translator/TranslatorHLSL.cpp",
    "src/compiler/translator/TranslatorHLSL.h",
    "src/compiler/translator/Types.cpp",
    "src/compiler/translator/Types.h",
    "src/compiler/translator/UnfoldShortCircuit.cpp",
    "src/compiler/translator/UnfoldShortCircuit.h",
    "src/compiler/translator/UnfoldShortCircuitAST.cpp",
    "src/compiler/translator/UnfoldShortCircuitAST.h",
    "src/compiler/translator/ValidateLimitations.cpp",
    "src/compiler/translator/ValidateLimitations.h",
    "src/compiler/translator/ValidateOutputs.cpp",
    "src/compiler/translator/ValidateOutputs.h",
    "src/compiler/translator/VariableInfo.cpp",
    "src/compiler/translator/VariableInfo.h",
    "src/compiler/translator/VariablePacker.cpp",
    "src/compiler/translator/VariablePacker.h",
    "src/compiler/translator/VersionGLSL.cpp",
    "src/compiler/translator/VersionGLSL.h",
    "src/compiler/translator/compilerdebug.cpp",
    "src/compiler/translator/compilerdebug.h",
    "src/compiler/translator/depgraph/DependencyGraph.cpp",
    "src/compiler/translator/depgraph/DependencyGraph.h",
    "src/compiler/translator/depgraph/DependencyGraphBuilder.cpp",
    "src/compiler/translator/depgraph/DependencyGraphBuilder.h",
    "src/compiler/translator/depgraph/DependencyGraphOutput.cpp",
    "src/compiler/translator/depgraph/DependencyGraphOutput.h",
    "src/compiler/translator/depgraph/DependencyGraphTraverse.cpp",
    "src/compiler/translator/glslang.h",
    "src/compiler/translator/glslang.l",
    "src/compiler/translator/glslang.y",
    "src/compiler/translator/glslang_lex.cpp",
    "src/compiler/translator/glslang_tab.cpp",
    "src/compiler/translator/glslang_tab.h",
    "src/compiler/translator/intermOut.cpp",
    "src/compiler/translator/intermediate.h",
    "src/compiler/translator/length_limits.h",
    "src/compiler/translator/localintermediate.h",
    "src/compiler/translator/osinclude.h",
    "src/compiler/translator/ossource_posix.cpp",
    "src/compiler/translator/ossource_win.cpp",
    "src/compiler/translator/parseConst.cpp",
    "src/compiler/translator/timing/RestrictFragmentShaderTiming.cpp",
    "src/compiler/translator/timing/RestrictFragmentShaderTiming.h",
    "src/compiler/translator/timing/RestrictVertexShaderTiming.cpp",
    "src/compiler/translator/timing/RestrictVertexShaderTiming.h",
    "src/compiler/translator/util.cpp",
    "src/compiler/translator/util.h",
    "src/third_party/compiler/ArrayBoundsClamper.cpp",
    "src/third_party/compiler/ArrayBoundsClamper.h",
  ]

  if (is_win) {
    sources -= [ "src/compiler/translator/ossource_posix.cpp" ]
  } else {
    sources -= [ "src/compiler/translator/ossource_win.cpp" ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]

  deps = [
    ":includes",
    ":preprocessor",
  ]
}

config("translator_static_config") {
  defines = [ "ANGLE_TRANSLATOR_STATIC" ]
}

static_library("translator_static") {
  sources = [
    "src/compiler/translator/ShaderLang.cpp",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]
  direct_dependent_configs = [ ":translator_static_config" ]

  deps = [
    ":translator_lib",
  ]
}

# TODO(GYP) this requires some changes to the script before it will work.
# https://chromium-review.googlesource.com/#/c/202048/
if (false) {
  action("commit_id") {
    script = "src/commit_id.py"

    output_file = "$root_gen_dir/angle_commit.h"
    outputs = [ output_file ]

    args = [
      rebase_path(".", root_build_dir),
      rebase_path(output_file, root_build_dir),
    ]
  }
} else {
  # While Angle is being updated, we copy a temporary hardcoded commit.h. This
  # is copied both as commit.h and angle_commit.h. The angle roll will rename
  # this file from commit.h to angle_commit.h and we don't want to make the
  # udpate more complicated than necessary.
  group("commit_id") {
    deps = [ ":copy_angle_commit_h", ":copy_commit_h" ]
  }

  hardcoded_commit = [ "//build/secondary/third_party/angle/angle_commit.h" ]
  copy("copy_angle_commit_h") {
    sources = hardcoded_commit
    outputs = [ "$root_gen_dir/angle_commit.h" ]
  }
  copy("copy_commit_h") {
    sources = hardcoded_commit
    outputs = [ "$root_gen_dir/commit.h" ]
  }
}

if (is_win) {
  angle_enable_d3d9 = true
  angle_enable_d3d11 = true

  shared_library("libGLESv2") {
    sources = [
      "src/common/RefCountObject.cpp",
      "src/common/RefCountObject.h",
      "src/common/angleutils.h",
      "src/common/blocklayout.cpp",
      "src/common/blocklayout.h",
      "src/common/debug.cpp",
      "src/common/debug.h",
      "src/common/event_tracer.cpp",
      "src/common/event_tracer.h",
      "src/common/mathutil.cpp",
      "src/common/mathutil.h",
      "src/common/shadervars.h",
      "src/common/utilities.cpp",
      "src/common/utilities.h",
      "src/common/version.h",
      "src/libGLESv2/BinaryStream.h",
      "src/libGLESv2/Buffer.cpp",
      "src/libGLESv2/Buffer.h",
      "src/libGLESv2/Context.cpp",
      "src/libGLESv2/Context.h",
      "src/libGLESv2/DynamicHLSL.cpp",
      "src/libGLESv2/DynamicHLSL.h",
      "src/libGLESv2/Fence.cpp",
      "src/libGLESv2/Fence.h",
      "src/libGLESv2/Float16ToFloat32.cpp",
      "src/libGLESv2/Framebuffer.cpp",
      "src/libGLESv2/Framebuffer.h",
      "src/libGLESv2/FramebufferAttachment.cpp",
      "src/libGLESv2/FramebufferAttachment.h",
      "src/libGLESv2/HandleAllocator.cpp",
      "src/libGLESv2/HandleAllocator.h",
      "src/libGLESv2/Program.cpp",
      "src/libGLESv2/Program.h",
      "src/libGLESv2/ProgramBinary.cpp",
      "src/libGLESv2/ProgramBinary.h",
      "src/libGLESv2/Query.cpp",
      "src/libGLESv2/Query.h",
      "src/libGLESv2/Renderbuffer.cpp",
      "src/libGLESv2/Renderbuffer.h",
      "src/libGLESv2/RenderbufferProxySet.cpp",
      "src/libGLESv2/RenderbufferProxySet.h",
      "src/libGLESv2/ResourceManager.cpp",
      "src/libGLESv2/ResourceManager.h",
      "src/libGLESv2/Sampler.cpp",
      "src/libGLESv2/Sampler.h",
      "src/libGLESv2/Shader.cpp",
      "src/libGLESv2/Shader.h",
      "src/libGLESv2/Texture.cpp",
      "src/libGLESv2/Texture.h",
      "src/libGLESv2/TransformFeedback.cpp",
      "src/libGLESv2/TransformFeedback.h",
      "src/libGLESv2/Uniform.cpp",
      "src/libGLESv2/Uniform.h",
      "src/libGLESv2/VertexArray.cpp",
      "src/libGLESv2/VertexArray.h",
      "src/libGLESv2/VertexAttribute.h",
      "src/libGLESv2/angletypes.cpp",
      "src/libGLESv2/angletypes.h",
      "src/libGLESv2/constants.h",
      "src/libGLESv2/formatutils.cpp",
      "src/libGLESv2/formatutils.h",
      "src/libGLESv2/libGLESv2.cpp",
      "src/libGLESv2/libGLESv2.def",
      "src/libGLESv2/libGLESv2.rc",
      "src/libGLESv2/main.cpp",
      "src/libGLESv2/main.h",
      "src/libGLESv2/precompiled.cpp",
      "src/libGLESv2/precompiled.h",
      "src/libGLESv2/queryconversions.cpp",
      "src/libGLESv2/queryconversions.h",
      "src/libGLESv2/renderer/BufferStorage.cpp",
      "src/libGLESv2/renderer/BufferStorage.h",
      "src/libGLESv2/renderer/FenceImpl.h",
      "src/libGLESv2/renderer/Image.cpp",
      "src/libGLESv2/renderer/Image.h",
      "src/libGLESv2/renderer/IndexBuffer.cpp",
      "src/libGLESv2/renderer/IndexBuffer.h",
      "src/libGLESv2/renderer/IndexDataManager.cpp",
      "src/libGLESv2/renderer/IndexDataManager.h",
      "src/libGLESv2/renderer/IndexRangeCache.cpp",
      "src/libGLESv2/renderer/IndexRangeCache.h",
      "src/libGLESv2/renderer/QueryImpl.h",
      "src/libGLESv2/renderer/RenderTarget.h",
      "src/libGLESv2/renderer/Renderer.cpp",
      "src/libGLESv2/renderer/Renderer.h",
      "src/libGLESv2/renderer/ShaderExecutable.h",
      "src/libGLESv2/renderer/SwapChain.h",
      "src/libGLESv2/renderer/TextureStorage.cpp",
      "src/libGLESv2/renderer/TextureStorage.h",
      "src/libGLESv2/renderer/VertexBuffer.cpp",
      "src/libGLESv2/renderer/VertexBuffer.h",
      "src/libGLESv2/renderer/VertexDataManager.cpp",
      "src/libGLESv2/renderer/VertexDataManager.h",
      "src/libGLESv2/renderer/copyimage.cpp",
      "src/libGLESv2/renderer/copyimage.h",
      "src/libGLESv2/renderer/copyvertex.h",
      "src/libGLESv2/renderer/generatemip.h",
      "src/libGLESv2/renderer/imageformats.h",
      "src/libGLESv2/renderer/loadimage.cpp",
      "src/libGLESv2/renderer/loadimage.h",
      "src/libGLESv2/renderer/loadimageSSE2.cpp",
      "src/libGLESv2/renderer/vertexconversion.h",
      "src/libGLESv2/resource.h",
      "src/libGLESv2/validationES.cpp",
      "src/libGLESv2/validationES.h",
      "src/libGLESv2/validationES2.cpp",
      "src/libGLESv2/validationES2.h",
      "src/libGLESv2/validationES3.cpp",
      "src/libGLESv2/validationES3.h",
      "src/third_party/murmurhash/MurmurHash3.cpp",
      "src/third_party/murmurhash/MurmurHash3.h",
      "src/third_party/systeminfo/SystemInfo.cpp",
      "src/third_party/systeminfo/SystemInfo.h",
    ]

    defines = [
      "ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ " +
        "TEXT(\"d3dcompiler_46.dll\"), TEXT(\"d3dcompiler_43.dll\") }",
      "GL_APICALL=",
      "GL_GLEXT_PROTOTYPES=",
      "EGLAPI=",
    ]
    libs = []

    # Shared D3dD sources.
    if (angle_enable_d3d9 || angle_enable_d3d11) {
      sources += [
        "src/libGLESv2/renderer/d3d/HLSLCompiler.cpp",
        "src/libGLESv2/renderer/d3d/HLSLCompiler.h",
      ]
    }

    if (angle_enable_d3d9) {
      sources += [
        "src/libGLESv2/renderer/d3d9/Blit9.cpp",
        "src/libGLESv2/renderer/d3d9/Blit9.h",
        "src/libGLESv2/renderer/d3d9/BufferStorage9.cpp",
        "src/libGLESv2/renderer/d3d9/BufferStorage9.h",
        "src/libGLESv2/renderer/d3d9/Fence9.cpp",
        "src/libGLESv2/renderer/d3d9/Fence9.h",
        "src/libGLESv2/renderer/d3d9/Image9.cpp",
        "src/libGLESv2/renderer/d3d9/Image9.h",
        "src/libGLESv2/renderer/d3d9/IndexBuffer9.cpp",
        "src/libGLESv2/renderer/d3d9/IndexBuffer9.h",
        "src/libGLESv2/renderer/d3d9/Query9.cpp",
        "src/libGLESv2/renderer/d3d9/Query9.h",
        "src/libGLESv2/renderer/d3d9/RenderTarget9.cpp",
        "src/libGLESv2/renderer/d3d9/RenderTarget9.h",
        "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
        "src/libGLESv2/renderer/d3d9/Renderer9.h",
        "src/libGLESv2/renderer/d3d9/ShaderCache.h",
        "src/libGLESv2/renderer/d3d9/ShaderExecutable9.cpp",
        "src/libGLESv2/renderer/d3d9/ShaderExecutable9.h",
        "src/libGLESv2/renderer/d3d9/SwapChain9.cpp",
        "src/libGLESv2/renderer/d3d9/SwapChain9.h",
        "src/libGLESv2/renderer/d3d9/TextureStorage9.cpp",
        "src/libGLESv2/renderer/d3d9/TextureStorage9.h",
        "src/libGLESv2/renderer/d3d9/VertexBuffer9.cpp",
        "src/libGLESv2/renderer/d3d9/VertexBuffer9.h",
        "src/libGLESv2/renderer/d3d9/VertexDeclarationCache.cpp",
        "src/libGLESv2/renderer/d3d9/VertexDeclarationCache.h",
        "src/libGLESv2/renderer/d3d9/formatutils9.cpp",
        "src/libGLESv2/renderer/d3d9/formatutils9.h",
        "src/libGLESv2/renderer/d3d9/renderer9_utils.cpp",
        "src/libGLESv2/renderer/d3d9/renderer9_utils.h",
        "src/libGLESv2/renderer/d3d9/shaders/compiled/componentmaskps.h",
        "src/libGLESv2/renderer/d3d9/shaders/compiled/flipyvs.h",
        "src/libGLESv2/renderer/d3d9/shaders/compiled/luminanceps.h",
        "src/libGLESv2/renderer/d3d9/shaders/compiled/passthroughps.h",
        "src/libGLESv2/renderer/d3d9/shaders/compiled/standardvs.h",
      ]

      defines += [ "ANGLE_ENABLE_D3D9" ]
      libs += [ "d3d9.lib" ]
    }

    if (angle_enable_d3d11) {
      sources += [
        "src/libGLESv2/renderer/d3d11/Blit11.cpp",
        "src/libGLESv2/renderer/d3d11/Blit11.h",
        "src/libGLESv2/renderer/d3d11/BufferStorage11.cpp",
        "src/libGLESv2/renderer/d3d11/BufferStorage11.h",
        "src/libGLESv2/renderer/d3d11/Clear11.cpp",
        "src/libGLESv2/renderer/d3d11/Clear11.h",
        "src/libGLESv2/renderer/d3d11/Fence11.cpp",
        "src/libGLESv2/renderer/d3d11/Fence11.h",
        "src/libGLESv2/renderer/d3d11/Image11.cpp",
        "src/libGLESv2/renderer/d3d11/Image11.h",
        "src/libGLESv2/renderer/d3d11/IndexBuffer11.cpp",
        "src/libGLESv2/renderer/d3d11/IndexBuffer11.h",
        "src/libGLESv2/renderer/d3d11/InputLayoutCache.cpp",
        "src/libGLESv2/renderer/d3d11/InputLayoutCache.h",
        "src/libGLESv2/renderer/d3d11/PixelTransfer11.cpp",
        "src/libGLESv2/renderer/d3d11/PixelTransfer11.h",
        "src/libGLESv2/renderer/d3d11/Query11.cpp",
        "src/libGLESv2/renderer/d3d11/Query11.h",
        "src/libGLESv2/renderer/d3d11/RenderStateCache.cpp",
        "src/libGLESv2/renderer/d3d11/RenderStateCache.h",
        "src/libGLESv2/renderer/d3d11/RenderTarget11.cpp",
        "src/libGLESv2/renderer/d3d11/RenderTarget11.h",
        "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
        "src/libGLESv2/renderer/d3d11/Renderer11.h",
        "src/libGLESv2/renderer/d3d11/ShaderExecutable11.cpp",
        "src/libGLESv2/renderer/d3d11/ShaderExecutable11.h",
        "src/libGLESv2/renderer/d3d11/SwapChain11.cpp",
        "src/libGLESv2/renderer/d3d11/SwapChain11.h",
        "src/libGLESv2/renderer/d3d11/TextureStorage11.cpp",
        "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
        "src/libGLESv2/renderer/d3d11/VertexBuffer11.cpp",
        "src/libGLESv2/renderer/d3d11/VertexBuffer11.h",
        "src/libGLESv2/renderer/d3d11/formatutils11.cpp",
        "src/libGLESv2/renderer/d3d11/formatutils11.h",
        "src/libGLESv2/renderer/d3d11/renderer11_utils.cpp",
        "src/libGLESv2/renderer/d3d11/renderer11_utils.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/buffertotexture11_gs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/buffertotexture11_ps_4f.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/buffertotexture11_ps_4i.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/buffertotexture11_ps_4ui.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/buffertotexture11_vs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/clearfloat11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/clearfloat11vs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/clearsint11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/clearsint11vs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/clearuint11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/clearuint11vs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthrough2d11vs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthrough3d11gs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthrough3d11vs.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughdepth2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughlum2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughlum3d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughlumalpha2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughlumalpha3d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughr2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughr2di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughr2dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughr3d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughr3di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughr3dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrg2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrg2di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrg2dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrg3d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrg3di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrg3dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb2di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb2dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb3d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb3di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb3dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba2d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba2di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba2dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba3d11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba3di11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba3dui11ps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzlef2darrayps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzlef2dps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzlef3dps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzlei2darrayps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzlei2dps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzlei3dps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzleui2darrayps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzleui2dps.h",
        "src/libGLESv2/renderer/d3d11/shaders/compiled/swizzleui3dps.h",
      ]

      defines += [ "ANGLE_ENABLE_D3D11" ]
      libs += [ "dxguid.lib" ]
    }

    if (is_debug) {
      defines += [ "ANGLE_ENABLE_PERF" ]
      libs += [ "d3d9.lib" ]
    }

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [
      ":internal_config",
      "//build/config/compiler:no_chromium_code",
    ]

    include_dirs = [ "src/libGLESv2" ]

    deps = [
      ":commit_id",
      ":includes",
      ":translator",
      #":copy_compiler_dll",  TODO(GYP)
    ]
  }

  shared_library("libEGL") {
    sources = [
      "src/common/RefCountObject.cpp",
      "src/common/RefCountObject.h",
      "src/common/angleutils.h",
      "src/common/blocklayout.cpp",
      "src/common/blocklayout.h",
      "src/common/debug.cpp",
      "src/common/debug.h",
      "src/common/event_tracer.cpp",
      "src/common/event_tracer.h",
      "src/common/mathutil.cpp",
      "src/common/mathutil.h",
      "src/common/shadervars.h",
      "src/common/utilities.cpp",
      "src/common/utilities.h",
      "src/common/version.h",
      "src/libEGL/Config.cpp",
      "src/libEGL/Config.h",
      "src/libEGL/Display.cpp",
      "src/libEGL/Display.h",
      "src/libEGL/Surface.cpp",
      "src/libEGL/Surface.h",
      "src/libEGL/libEGL.cpp",
      "src/libEGL/libEGL.def",
      "src/libEGL/libEGL.rc",
      "src/libEGL/main.cpp",
      "src/libEGL/main.h",
      "src/libEGL/resource.h",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [
      ":internal_config",
      "//build/config/compiler:no_chromium_code",
    ]

    if (is_debug) {
      defines = [ "ANGLE_ENABLE_PERF" ]
    }

    include_dirs = [ "src/libGLESv2" ]
    libs = [ "d3d9.lib" ]

    deps = [
      ":commit_id",
      ":includes",
      ":libGLESv2",
    ]
  }
}  # is_win
