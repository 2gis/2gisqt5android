/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtwebengine-features.html
    \title Qt WebEngine Features

    \brief Summarizes Qt WebEngine features.

    Qt WebEngine supports the following Chromium features:

    \list
        \li \l{Audio and Video Codecs}
        \li \l{Chromium DevTools}
        \li \l{Fullscreen}
        \li \l{HTML5 Geolocation}
        \li \l{Pepper Plugin API}
        \li \l{WebRTC}
    \endlist

    \section1 Audio and Video Codecs

    Qt WebEngine supports the MPEG-4 Part 14 (MP4) file format only if the
    required proprietary audio and video codecs, such as H.264 and MPEG layer-3
    (MP3), have been enabled. Proprietary codecs can be enabled by passing the
    following option to qmake when building Qt WebEngine:

    \code
    qmake WEBENGINE_CONFIG+=use_proprietary_codecs
    \endcode

    \warning When distributing proprietary codec libraries, you must acquire
    licenses for them.

    \l FFmpeg is a cross-platform solution to record, convert, and stream audio
    and video. It can be configured for use with several codecs, which rises
    licensing issues during distribution with the codec libraries. For some
    codecs, open source implementations, such as \l {OpenH264}, are available.

    \section1 Chromium DevTools

    The Chromium DevTools provide the ability to inspect and debug layout and
    performance issues of any web content.

    This feature can be tested by launching a Qt WebEngine application with the
    command line option \c {--remote-debugging-port=[your-port]} or by setting
    the environment variable \c QTWEBENGINE_REMOTE_DEBUGGING, and then using a
    Chromium based browser (such as \l{WebEngine Demo Browser Example}
    {Demo Browser} or \l{WebEngine Quick Nano Browser}{Nano Browser}) to connect
    to \c {http://localhost:[your-port]}.

    For more information, see \l {Qt WebEngine Debugging and Profiling}.

    \section1 Fullscreen

    Qt WebEngine supports viewing web content in fullscreen mode. For more
    information, see \l{WebEngineSettings::fullscreenSupportEnabled}
    {WebEngineSettings.fullscreenSupportEnabled},
    \l{WebEngineView::fullScreenRequested}{WebEngineView.fullScreenRequested},
    QWebEngineSettings::FullScreenSupportEnabled, and
    QWebEnginePage::fullScreenRequested.

    This feature can be tested by playing a video from YouTube in \l{WebEngine
    Demo Browser Example}{Demo Browser} or \l{WebEngine Quick Nano Browser}
    {Nano Browser}, and clicking the full screen icon to go into fullscreen
    mode.

    Support for this feature was added in Qt 5.6.0.

    \section1 HTML5 Geolocation

    Qt WebEngine supports JavaScript Geolocation API with \l {Qt Location} as a
    backend. The application has to explicitly allow the feature by using
    QWebEnginePage::Geolocation or \l{WebEngineView::Feature}
    {WebEngineView.Feature}.

    This feature can be tested if Qt Location has been built before Qt WebEngine.
    The \c http://html5demos.com/geo page can be opened in the \l{WebEngine Demo
    Browser Example}{Demo Browser} and allowed to find the current position of
    the user. Note that on Windows an external GPS receiver must be connected to
    the application. For more information, see \l{Qt Positioning}.

    Support for this feature was added in Qt 5.5.0.

    \section1 Pepper Plugin API

    Qt WebEngine supports loading Pepper Plugin API (PPAPI) plugins if
    WebEngineSettings::pluginsEnabled or QWebEngineSettings::PluginsEnabled
    is set.

    Except for the Adobe Flash Player plugin, the plugins must be loaded
    manually using the Chromium command line syntax with the
    \c --register-pepper-plugins argument. The argument value is a list of
    entries, separated by commas, that contain the file path and one or several
    MIME types, separated by semicolons:

    \code
    <file-path-plugin1>;<mime-type-plugin1>,<file-path-plugin2>;<mime-type1-plugin2>;<mime-type2-plugin2>
    \endcode

    For example:

    \code
    --register-pepper-plugins="libppapi_example.so;application/x-ppapi-example"
    \endcode

    The MIME type is important because it determines which embeds the plugin is
    used for.

    Support for this feature was added in Qt 5.6.0.

    \section2 Pepper Flash Player Plugin Support

    The Pepper Flash player plugin can be loaded automatically if it is
    installed in one of the following locations, depending on the platform:

    \list
        \li Windows
            \code
            C:\Windows\SysWOW64\Macromed\Flash\pepflashplayer*.dll
            C:\Windows\System32\Macromed\Flash\pepflashplayer*.dll
            \endcode
        \li OS X
            \code
            /Library/Internet Plug-Ins/PepperFlashPlayer/PepperFlashPlayer.plugin
            \endcode
        \li Linux
            \code
            /usr/lib/pepperflashplugin-nonfree/libpepflashplayer.so
            /usr/lib/PepperFlash/libpepflashplayer.so
            /usr/lib64/chromium/PepperFlash/libpepflashplayer.so
            \endcode
    \endlist

    You can also load the Pepper Flash player from a specific location by using
    command line arguments:

    \code
    --ppapi-flash-path=./libpepflashplayer.so
    \endcode

    By default, the Flash version is set to \c{11.2.999.999}. You can use the
    \c{ppapi-flash-version=} argument to set another Flash version in the
    format \c{major.minor.build.revision}:

    \code
    --ppapi-flash-version=16.0.0.235
    \endcode

    This feature can be tested in \l{WebEngine Demo Browser Example}{Demo Browser}
    or \l{WebEngine Quick Nano Browser}{Nano Browser} if the Adobe Flash PPAPI
    plugin is installed and plugins are enabled in the browser. To test the
    feature, the \c https://helpx.adobe.com/flash-player.html page can be opened
    in the browser.

    \section1 WebRTC

    WebRTC provides browsers with Real-Time Communications (RTC) capabilities
    via simple APIs. For more information, see \l{WebEngineView::Feature}
    {WebEngineView.Feature} and QWebEnginePage::Feature.

    This feature can be tested by setting up a webcam or microphone and then
    opening \c https://test.webrtc.org/ in \l{WebEngine Widgets Simple Browser
    Example}{Simple Browser} or \l{WebEngine Quick Nano Browser}{Nano Browser}.
*/
