/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page platform-notes-vxworks.html
    \title Platform and Compiler Notes - VxWorks
    \contentspage Platform and Compiler Notes
    \target VxWorks

    Qt for VxWorks is available only under a commercial license.

    Please contact Qt sales at Digia to find out more:
    http://info.qt.digia.com/contact-qt

*/

/*!
    \page platform-notes-qnx.html
    \title Platform and Compiler Notes - QNX
    \contentspage Platform and Compiler Notes
    \target QNX

    \note QNX is a community supported platform.

    \section1 Supported Architectures and QNX Versions

    Qt 5 is currently tested and supported on QNX 6.5.0 SP1 supplemented by the new QNX UI Core
    graphics framework (Screen). Supported architectures are ARMle-v7 and x86. Other QNX versions and
    architectures may also work, but are not subject to regular builds and testing. For a
    specific list of available boards, displays and input devices, contact QNX Software Systems
    (info@qnx.com) or KDAB (qnx-info@kdab.com).

    \section1 Build Requirements

    Building Qt 5 requires \l {http://www.qnx.com/download/group.html?programid=20905}{QNX SDP 6.5.0 SP1} from the \l {http://www.qnx.com/}{QNX website} and the new QNX UI Core
    graphics framework (contact QNX for access).

    Supported compiler is qcc for both ARMle-v7 (QMakespec qnx-armv7le-qcc)
    and x86 (qnx-x86-qcc).

    When building qtbase, recommended configure flags include:

    \code
    -opengl es2 -egl -no-cups -no-xcb -no-eglfs -no-javascript-jit -no-gtkstyle -no-iconv
    \endcode

    \section2 Screen and OpenGL

    As noted above, building Qt 5 requires the QNX 6.5.0 SP1 and the new UI Core graphics
    framework headers and libraries. Both are available through QNX. For OpenGL support
    (GL widgets and QML2), OpenGL ES2 or higher must be available.

    \section1 Runtime Requirements

    On the QNX target device, certain requirements must be met at runtime
    to ensure Qt functions correctly.

    \section2 UI Core (QNX Screen)

    Before starting any Qt application, QNX Screen, the UI framework driver, must be started. To ensure QNX Screen is
    configured correctly, verify that applications like gles2-gears can be started and run without problems.

    \section2 IPv6 Support

    Qt's networking stack, \l{Qt Network}, requires IPv6 support to be enabled, independent of
    whether the actual networking uses IPv4 or IPv6. That means, that io-pkt-v6-hc must be running, \e {not} io-pkt-v4.

    \section2 /dev/random

    Qt requires \c{/dev/random} to be present and functional. Thus, start \c random before starting any Qt application:

    \code
    random -t
    \endcode

    \section2 Physical Screen Size

    Qt needs information about the physical dimensions of the attached display to determine DPI
    information and thus correct font sizes. This information is provided by Screen.
    In some cases you may see an invalid screen size such as 0mmx0mm.
    In such a case Qt requires an environment variable \c QQNX_PHYSICAL_SCREEN_SIZE to get the required information.
    If Qt applications exits with an error message saying that the physical screen size couldn't be determined,
    set the variable like this before starting the Qt application:

    \code
    export QQNX_PHYSICAL_SCREEN_SIZE=150,100
    \endcode

    to inform Qt that the screen has a width of 150mm and a height of 100mm.
    (Note that the physical screen size is measured in millimeters (mm))

    \section1 Development Board Setup

    To develop for QNX with Qt Creator, the development board needs the following setup:

    \section2 ssh

    For deploying and running a binary remotely on the development board with Qt Creator,
    ssh must be installed and running. ssh in turn also requires \c{/dev/random}.

    \section2 pdebug

    For remote debugging to work, pdebug must be running on the development device. See
    the QNX documentation included with the QNX Momentics development tool suite for
    more details pertaining to pdebug and other QNX development tools.
*/

/*!
    \page platform-notes-integrity.html
    \title Platform Notes - INTEGRITY
    \contentspage Platform Notes
    \target INTEGRITY

    \note \l {http://www.ghs.com/products/rtos/integrity.html}{INTEGRITY} is a community supported platform

    \sa {http://blog.qt.digia.com/blog/2012/06/01/developing-with-qt-commercial-for-integrity-on-windows-a-step-by-step-guide-to-configure-and-compile-qt-commercial-on-integrity-2/}{Developing with Qt Commercial for INTEGRITY on Windows}
    \sa {http://qt.gitorious.org/qt/qt-integrity}{the git repository}
*/
