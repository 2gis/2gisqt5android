/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/location

testcase = {

    qml_static_mapobjects:function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Static Map Objects";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that static map objects can be drawn.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen. |
        | | Verify that there are 2 circles associated with Nokia and Eight Mile Plains labels. |
        | Zoom in the map to about level 11 | Verify that map still has the circles. |
        | Zoom in the map to about level 18 so green circle would fill entire viewport | Verify that map has the circles. |
        | Zoom in the map to about level 17 so green circle should still fill entire viewport | Verify that map has the circles. |
        | Pan the map so circles' centres go out of the viewport | Verify that map can display partially visible circles |"
        ));
    },

    qml_polyline_mapitem_data: {
        nodes:["-26.15", "152.1", "-28", "152.6", "-27", "153"],
        nodes_near_dateline:["67", "179.5", "66.5", "-179.5", "66.7", "179"]
    },

    qml_polyline_mapitem:function(lat1, long1, lat2, long2, lat3, long3)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Polyline";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that polyline can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + lat1 + " in Latitude field | |
        | Fill in " + long1 + " in Longitude | |
        | Select Go! button | |
        | Create second Marker | |
        | Press and Hold on the second marker | |
        | Select 'Move to' button | |
        | Fill in " + lat2 + " in Latitude field | |
        | Fill in " + long2 + " in Longitude | |
        | Select Go! button | |
        | Create third Marker | |
        | Press and Hold on the third marker | |
        | Select 'Move to' button | |
        | Fill in " + lat3 + " in Latitude field | |
        | Fill in " + long3 + " in Longitude | |
        | Select Go! button | |
        | Press and Hold on the first marker | |
        | Select Draw... button | |
        | Select Polyline button | Verify that polyine is drawn correctly. |"
        ));
    },

    qml_polygon_mapitem_data: {
        pentagon:["-27", "150", "-20", "155", "-15", "160", "-20", "167", "-27", "167"],
        concave_pentagon:["-27", "150", "-20", "155", "-24", "160", "-20", "167", "-27", "-167"],
        pentagon_crossing_dateline:["67", "170", "62", "175", "58", "180", "62", "-175", "67", "-170"]
    },

    qml_polygon_mapitem:function(lat1, long1, lat2, long2, lat3, long3, lat4, long4, lat5, long5)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Polygon";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that polygon can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Zoom out to about level 4 | |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + lat1 + " in Latitude field | |
        | Fill in " + long1 + " in Longitude | |
        | Select Go! button | |
        | Create second Marker | |
        | Press and Hold on the second marker | |
        | Select 'Move to' button | |
        | Fill in " + lat2 + " in Latitude field | |
        | Fill in " + long2 + " in Longitude | |
        | Select Go! button | |
        | Create third Marker | |
        | Press and Hold on the third marker | |
        | Select 'Move to' button | |
        | Fill in " + lat3 + " in Latitude field | |
        | Fill in " + long3 + " in Longitude | |
        | Select Go! button | |
        | Create fourth Marker | |
        | Press and Hold on the fourth marker | |
        | Select 'Move to' button | |
        | Fill in " + lat4 + " in Latitude field | |
        | Fill in " + long4 + " in Longitude | |
        | Select Go! button | |
        | Create fifth Marker | |
        | Press and Hold on the fifth marker | |
        | Select 'Move to' button | |
        | Fill in " + lat5 + " in Latitude field | |
        | Fill in " + long5 + " in Longitude | |
        | Select Go! button | |
        | Press and Hold on the first marker | |
        | Select Draw... button | |
        | Select Polygon button | Verify that polgon is drawn correctly. |
        | Press and hold on the map | |
        | Select 'Delete all markers' | |
        | Drag the polygon | Verify that polygon can be dragged |"
        ));
    },

    qml_circle_mapitem_data:{
        nodes:["-27", "150", "-27", "151"],
        nodes_near_dateline:["67", "179.5", "67", "-179.5"]
    },

    qml_circle_mapitem:function(lat1, long1, lat2, long2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Circle";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that circle can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTBUG-25388";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + lat1 + " in Latitude field | |
        | Fill in " + long1 + " in Longitude | |
        | Select Go! button | |
        | Create second Marker | |
        | Press and Hold on the second marker | |
        | Select 'Move to' button | |
        | Fill in " + lat2 + " in Latitude field | |
        | Fill in " + long2 + " in Longitude | |
        | Select Go! button | |
        | Press and Hold on the first marker | |
        | Select Draw... button | |
        | Select Circle button | Verify that circle is drawn correctly. |
        | Pres and hold center marker | |
        | Select Delete button | |
        | Pan the map to the left until the second marker hits the screen border | Verify that circle can be partually drawn. |"
        ));
    },

    qml_video_mapitem_data:{
        nodes:["-27", "150"],
        nodes_near_dateline:["-27", "179.9"]
    },

    qml_video_mapitem:function(latitude, longitude)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Video";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that video can be placed on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude | |
        | Select Go! button | |
        | Press and Hold on the marker | |
        | Select Draw... button | |
        | Select Video button | Verify that video is positioned correctly and it plays. |
        | Press on the Video | Verify that it stops |"
        ));
    },

    qml_image_mapitem_data:{
        nodes:["-27", "150"],
        nodes_near_dateline:["-27", "179.9"]
    },

    qml_image_mapitem:function(latitude,longitude)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Image";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that circle can be drawn on map.";
        testPreconditions = "Internet connection is required for this test casei.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude | |
        | Select Go! button | |
        | Press and Hold on the marker | |
        | Select Draw... button | |
        | Select Image button | Verify that image is drawn correctly. |"
        ));
    },

    qml_3dqml_mapitem_data:{
        nodes:["-27", "150"],
        nodes_near_dateline:["-27", "179.9"]
    },

    qml_3dqml_mapitem:function(latitude, longitude)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - 3D QML Item";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that 3D QML item can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude | |
        | Select Go! button | |
        | Press and Hold on the marker | |
        | Select Draw... button | |
        | Select '3D QML Item' button | Verify that rotating cube is on the map. |
        | Wait for a minute | Verify that cube is rotating. |
        | Press and hold on the map | |
        | Select 'Delete all items' | |
        | Pan the map | Verify that map can be panned correctly |"
        ));
    },

    qml_mapitems_zooming: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Mapitem object zooming";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that markers, image, 3d item and video objects are not scaled, verify that polyline, polygon, circle and rectangle are scaled.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-757: Be able to prevent a QGeoMapPixmapObject from being scaled when zooming occurs, QTMOBILITY-701: Add a QGraphicsItem based map object.";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Create second Marker | |
        | Create third Marker | |
        | Create fourth Marker | |
        | Press and Hold on the first marker | |
        | Select Draw... button | |
        | Select Polyline | |
        | Press and Hold on the first marker | |
        | Select Draw... button | |
        | Select Rectangle | |
        | Press and Hold on the second marker | |
        | Select Draw... button | |
        | Select Polygon | |
        | Press and Hold on the second marker | |
        | Select Draw... button | |
        | Select Image | |
        | Press and Hold on the third marker | |
        | Select Draw... button | |
        | Select Circle | |
        | Press and Hold on the third marker | |
        | Select Draw... button | |
        | Select '3D QML Item' | |
        | Press and Hold on the fourth marker | |
        | Select Draw... button | |
        | Select Video | |
        | Zoom in the map | Verify that polyline, polygon, rectangle and circle are scaled and video, image, 3dqml item are not scaled |
        | Zoom out the map | Verify that polyline, polygon, rectangle and circle are scaled and video, image, 3dqml item are not scaled |"
        ));
    },

    qml_mapquickitem_updating_coordinates_data:{
        nodes:["-33.8707", "151.1898", "Sydney"],
    },

    qml_mapquickitem_updating_coordinates: function(latitude, longitude, city)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Updating coordinates of mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that new coordinates can be set to mapitem.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTBUG-23329";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | |
        | Select 'Move to' button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude | |
        | Select Go! button | Verify that marker places next to " + city + " |
        | Pan the map | Verify that marker doesn't change it's coordinate. |"
        ));
    },

    qml_mapquickitem_interaction: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Interaction with MapQuickItems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that mapitem can handle touch/mouse events.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the marker | Verify that popup menu appears |
        | Press on the map | Verify that popup menu disappears | |
        | Pan the map | Verify that marker doesn't change it's coordinate. |
        | Flick the map both ways | Verify that marker doesn't change it's coordinate. |
        | Drag the marker | Verify that marker can be dragged correctly. |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the map | |
        | Select 'Add Marker' button | |
        | Press and Hold on the first marker | |
        | Select 'Draw...' button | |
        | Select Polygon button | |
        | Drag polygon | Verify that poligon is dragged correcly |
        | Pan the map | Verify that polygon doesn't change it's coordinates |
        | Drag polygon to the side of the screen so it is partially overlapping |
        | Drag polygon back (do not release mouse button) | Verify that polygon is not scissored |
        | Release mouse button | Verify that polygon is not scissored |"
        ));
    },


    qml_mapquickitem_contains_mouse: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Mapitems contained mouse";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that mapitem can correctly detect wheter the mouse is inside the mouse area or not.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTBUG-20096";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Select Tools | |
        | Select Reverse geocode | |
        | Select Go! | |
        | Wait for successful geocode results | |
        | Select Ok button | |
        | Zoom in approximately to level 15 | |
        | Press and Hold on the circle | Verify that the circle is green. |
        | | Verify that popup menu appears. |
        | Select Info | Verify that the circle is red. |"
        ));
    },

    qml_mapitem_bounding_box_events: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Bounding box events of mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that mouse events can go through bounding box of a mapitemroute.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTBUG-24537";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Select Tools | |
        | Select Reverse geocode | |
        | Select Go! | |
        | Wait for successful geocode results | |
        | Select Ok button | |
        | Zoom in approximately to level 15 | |
        | Select Tools | |
        | Select Route | |
        | Select Go! button | |
        | Wait for successful route result | |
        | Press and Hold on the circle inside route's bounding box | Verify that circle is green. |"
        ));
    },

    qml_route_interaction: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Interaction with route";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can handle touch/mouse events.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Select Tools | |
        | Select Route | |
        | Select Go! button | |
        | Wait for successful route result | |
        | Press and Hold on the route | Verify that route is green. |"
        ));
    },


    qml_mapitem_border_interaction_data:{
        nodes:["-27.1144", "152.6594", "-27.7434", "153.3021"]
    },

    qml_mapitem_border_interaction:function(rectlat1, rectlong1, rectlat2, rectlong2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Interaction with borders of mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that mapitem's border can handle touch/mouse events ().";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTBUG-23985";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Long Press on the map | |
        | Select 'Add Marker' button | |
        | Long Press on the marker | |
        | Select 'Move to' button | |
        | Fill in " + rectlat1 + " in Latitude field | |
        | Fill in " + rectlong1 + " in Longitude | |
        | Select Go! button | |
        | Long Press on the map | |
        | Select 'Add Marker' button | |
        | Long Press on the second marker | |
        | Select 'Move to' button | |
        | Fill in " + rectlat2 + " in Latitude field | |
        | Fill in " + rectlong2 + " in Longitude | |
        | Select Go! button | |
        | Pan the map to see both Markers |
        | Press and Hold on the first marker | |
        | Select Draw | |
        | Select Rectangle | |
        | Press and Hold on the left border | Verify that rectangle is green. |
        | Press and Hold on the top border | Verify that rectangle is green. |
        | Press and Hold on the right border | Verify that rectangle is green. |
        | Press and Hold on the bottom border | Verify that rectangle is green. |"
        ));
    }
}  // end of testcase
